// this is here as a backup in case it needs to be reference again


    // the tris are shaped like this:
    // t t t t t    ┌─┬─┬─┬─┐
    //              │╲│╱│╲│╱│
    // t x t x t -> ├─┼─┼─┼─┤
    //              │╱│╲│╱│╲│
    // t t t t t    └─┴─┴─┴─┘
    //
    // where the t's are regular tiles and the x's are "xtile"s

    // Also, holy crap this will need cleaning up
    for(std::size_t i = 0; i < this->tiles.size() / 4; i++) {
        auto const xtile = 
            (i/8 * 32)     // row
          + ((i * 2) % 16) // column
          + 17;            // down 1 right 1
        auto const xtileRow = xtile / 16;
        auto const xtileColumn = xtile % 16;
        auto const onBottomEdge = xtileRow == 15;
        auto const onRightEdge  = xtileColumn == 15;
        for(auto ni: {
            xtile, xtile - 16, xtile - 17, 
            xtile, xtile - 17, xtile - 1
        }) { indices.push_back(ni); }
        if(!onBottomEdge) for(auto ni: {
            xtile, xtile - 1,  xtile + 15, 
            xtile, xtile + 15, xtile + 16
        }) { indices.push_back(ni); }
        else if(bottomChunk.has_value()) for(auto ni: {
            xtile, xtile - 1, bottomChunkOffset + xtileColumn - 1,
            xtile, bottomChunkOffset + xtileColumn - 1, bottomChunkOffset + xtileColumn
        }) { indices.push_back(ni); }
        if(!onRightEdge) for(auto ni: {
            xtile, xtile - 15, xtile - 16, 
            xtile, xtile + 1,  xtile - 15
        }) { indices.push_back(ni); }
        else if(rightChunk.has_value()) for(auto ni: {
            xtile, rightChunkOffset + xtileRow - 1, xtile - 16,
            xtile, rightChunkOffset + xtileRow, rightChunkOffset + xtileRow - 1
        }) { indices.push_back(ni); }
        if((!onBottomEdge) && (!onRightEdge)) for(auto ni: {
            xtile, xtile + 16, xtile + 17, 
            xtile, xtile + 17, xtile + 1
        }) { indices.push_back(ni); }
        else if(
            onBottomEdge
         && onRightEdge
         && bottomRightChunk.has_value()
         && bottomChunk.has_value()
         && rightChunk.has_value()) for(auto ni: {
            xtile, bottomChunkOffset + xtileColumn, bottomRightChunkOffset,
            xtile, bottomRightChunkOffset, rightChunkOffset + xtileRow
        }) { indices.push_back(ni); }
        else if((onBottomEdge) && (!onRightEdge) && bottomChunk.has_value()) for(auto ni: {
            xtile, bottomChunkOffset + xtileColumn, bottomChunkOffset + xtileColumn + 1,
            xtile, bottomChunkOffset + xtileColumn + 1, xtile + 1
        }) { indices.push_back(ni); }
        else if((!onBottomEdge) && (onRightEdge) && rightChunk.has_value()) for(auto ni: {
            xtile, xtile + 16, rightChunkOffset + xtileRow + 1,
            xtile, rightChunkOffset + xtileRow + 1, rightChunkOffset + xtileRow
        }) { indices.push_back(ni); }
    }